{"version":3,"sources":["App.module.css","components/Recipe/Recipe.module.css","components/Navbar/Navbar.module.css","components/Recipe/Recipe.jsx","components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","showIngredients","ingredients","map","i","text","className","style","Item","title","calories","src","img","alt","Navbar","Header","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","async","fetch","response","json","data","console","log","hits","showRecipes","rec","recipe","image","label","AppForm","onSubmit","ev","preventDefault","type","AppInput","onChange","target","value","placeholder","onClick","AppBtn","AppList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,QAAU,qBAAqB,SAAW,sBAAsB,OAAS,oBAAoB,QAAU,uB,oBCAhJD,EAAOC,QAAU,CAAC,KAAO,uB,gBCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,+KCmBZC,EAjBA,SAACC,GACZ,IAAMC,EAAkBD,EAAME,YAAYC,KAAI,SAAAC,GAC1C,OAAO,4BAAKA,EAAEC,SAGlB,OACI,yBAAKC,UAAWC,IAAMC,MAClB,4BAAKR,EAAMS,OACX,qCAAWT,EAAMU,UACjB,4BACKT,GAEL,yBAAKU,IAAKX,EAAMY,IAAKC,IAAI,kB,gBCJtBC,EARA,SAACd,GACZ,OACI,yBAAKM,UAAWC,IAAMQ,QAClB,2C,gBCuDGC,EAxDH,SAAChB,GACX,IADqB,EAESiB,mBAAS,IAFlB,mBAEdC,EAFc,KAELC,EAFK,OAGOF,mBAAS,IAHhB,mBAGdG,EAHc,KAGNC,EAHM,OAIKJ,mBAAS,UAJd,mBAIdK,EAJc,KAIPC,EAJO,KAMrBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OAAoCN,EAApC,mBAVf,WAUe,oBAVO,sCASlB,cACXO,EADW,kBAAAH,EAAA,MAEEG,EAASC,QAFX,OAEXC,EAFW,OAIjBC,QAAQC,IAAIF,EAAKG,MACjBf,EAAWY,EAAKG,MALC,sCAkBbC,EAAcjB,EAAQf,KAAI,SAAAiC,GAC5B,OAAO,kBAAC,EAAD,CAAQxB,IAAKwB,EAAIC,OAAOC,MAAO7B,MAAO2B,EAAIC,OAAOE,MAAO7B,SAAU0B,EAAIC,OAAO3B,SAAUR,YAAakC,EAAIC,OAAOnC,iBAG1H,OACE,yBAAKI,UAAWC,IAAMS,KACpB,kBAAC,EAAD,MAEA,yBAAKV,UAAWC,IAAMiC,SACpB,sEAEA,0BAAMC,SAhBM,SAACC,GACjBA,EAAGC,iBACHpB,EAASH,KAeD,2BAAOwB,KAAK,OAAOtC,UAAWC,IAAMsC,SAAUC,SAtBnC,SAACJ,GACpBrB,EAAUqB,EAAGK,OAAOC,OACpBhB,QAAQC,IAAIb,IAoBkE6B,YAAY,oBAClF,4BAAQC,QAASzB,EAAYmB,KAAK,SAAStC,UAAWC,IAAM4C,QAA5D,YAMN,wCAEA,yBAAK7C,UAAWC,IAAM6C,SACnBjB,KC3CWkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,QD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fda30f6f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__2pfjB\",\"AppForm\":\"App_AppForm__mYZdZ\",\"AppInput\":\"App_AppInput__103fz\",\"AppBtn\":\"App_AppBtn__1sIAt\",\"AppList\":\"App_AppList__2A5eR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"Recipe_Item__1tatz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Navbar_Header__3AN-a\"};","import React from 'react';\r\nimport style from './Recipe.module.css';\r\n\r\nconst Recipe = (props) => {\r\n    const showIngredients = props.ingredients.map(i => {\r\n        return <li>{i.text}</li>\r\n    });\r\n\r\n    return (\r\n        <div className={style.Item}>\r\n            <h2>{props.title}</h2>\r\n            <h3>Cal > {props.calories}</h3>\r\n            <ol>\r\n                {showIngredients}\r\n            </ol>\r\n            <img src={props.img} alt=\"recipeIMAGE\"/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipe;","import React from 'react';\r\nimport style from './Navbar.module.css';\r\n\r\nconst Navbar = (props) => {\r\n    return (\r\n        <div className={style.Header}>\r\n            <h2>myRecipes</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, { useEffect, useState } from 'react';\nimport Recipe from './components/Recipe/Recipe.jsx';\nimport Header from './components/Navbar/Navbar.jsx';\nimport style from './App.module.css';\n\nconst App = (props) => {\n  const APP_ID = 'cf010f72', APP_KEY = 'c2691d0fdf556cf3a9282ac6fb6d1297';\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('banana');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n\n    console.log(data.hits);\n    setRecipes(data.hits);\n  };\n\n  const updateSearch = (ev) => {\n    setSearch(ev.target.value);\n    console.log(search);\n  };  \n\n  const getSearch = (ev) => {\n    ev.preventDefault();\n    setQuery(search);\n  };\n\n  const showRecipes = recipes.map(rec => {\n      return <Recipe img={rec.recipe.image} title={rec.recipe.label} calories={rec.recipe.calories} ingredients={rec.recipe.ingredients}/>\n  });\n\n  return (\n    <div className={style.App}>\n      <Header />\n\n      <div className={style.AppForm}>\n        <h3>What are recipes do you want to know ?</h3>\n  \n        <form onSubmit={getSearch}>\n            <input type=\"text\" className={style.AppInput} onChange={updateSearch} placeholder=\"Go to Search...\"/>\n            <button onClick={getRecipes} type=\"submit\" className={style.AppBtn}>\n                Search\n            </button>\n        </form>\n      </div>\n\n      <h1>Recipes:</h1>\n\n      <div className={style.AppList}> \n        {showRecipes}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}